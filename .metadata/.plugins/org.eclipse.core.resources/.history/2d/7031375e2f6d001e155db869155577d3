package dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.ArrayList;
import java.util.List;

import connection.ConnectionMySQL;
import modelos.Passagens;

public class PassagensDAO {
	//create
		public void create(Passagens Passagem) {
			
		    String sql = "INSERT INTO Passagem (idPassagem, valorPassagem, fk_Passagens_idPassagens, fk_Destinos_idDestino)VALUES(?, ?, ?, ?),";

		    Connection connection = null;
			PreparedStatement preparedStatement = null;

			try {
			    connection = ConnectionMySQL.createConnectionMySQL();

			    preparedStatement = connection.prepareStatement(sql);

			    preparedStatement.setString(1, Passagem.getNome());
			    preparedStatement.setString(2, Passagem.getCPF());
			    preparedStatement.setString(3, Passagem.getEmail());
			    preparedStatement.setString(4, Passagem.getTelefone());
			   

			    preparedStatement.execute();

			}catch (Exception e) {
				e.printStackTrace();
			}finally {
				try {
					if (preparedStatement != null)
						preparedStatement.close();
				    

				    if (preparedStatement != null) {
				        connection.close();
				    }
				}catch (Exception e) {
					e.printStackTrace();
			}
		}
	}
		
		
		//read
		public List<Passagens> read(){
			List<Passagens> Passagens = new ArrayList<Passagens>();
			String sql = "select * from Passagens";
			
			Connection conn = null;
			PreparedStatement pstm = null;
			ResultSet rset = null;
			
			try {
				conn = ConnectionMySQL.createConnectionMySQL();
				pstm = conn.prepareStatement(sql);
				rset = pstm.executeQuery();
				
				while (rset.next()) {
					Passagens Passagem = new Passagens();
					 
					Passagem.setId(rset.getInt("idPassagem"));
					Passagem.setNome(rset.getString("nome"));
					Passagem.setCPF(rset.getString("cpf"));
					Passagem.setEmail(rset.getString("email"));
					Passagem.setTelefone(rset.getString("telefone"));
					
					Passagens.add(Passagem);

				}
				
			}catch (Exception e) {
				e.printStackTrace();
			}finally {
				try {
					if (pstm != null)
				        pstm.close();
				    

				    if (conn != null) {
				        conn.close();
				    }
				}catch (Exception e) {
					e.printStackTrace();
			}
			}
			
			return Passagens;
		}
		
		//update
		public void update(Passagens Passagem) {
			String sql = "UPDATE Passagens SET nome= ?, CPF = ?, email = ?, telefone = ? WHERE idPassagens = ?";
			
			Connection conn = null;
			PreparedStatement pstm = null;
			try {
			    conn = ConnectionMySQL.createConnectionMySQL();

			    pstm = conn.prepareStatement(sql);

			    pstm.setString(1, Passagem.getNome());
			    pstm.setString(2, Passagem.getCPF());
			    pstm.setString(3, Passagem.getEmail());
			    pstm.setString(4, Passagem.getTelefone());
			    pstm.setInt(5, Passagem.getId());
			   

			    pstm.execute();

			}catch (Exception e) {
				e.printStackTrace();
			}finally {
				try {
					if (pstm != null)
				        pstm.close();
				    

				    if (conn != null) {
				        conn.close();
				    }
				}catch (Exception e) {
					e.printStackTrace();
			}
		 }

		}
		
		
		//delete
		public void delete(int id) {
			String sql = "DELETE FROM Passagens WHERE idPassagens = ?";
			
			Connection conn = null;
			PreparedStatement pstm = null;
			try {
			    conn = ConnectionMySQL.createConnectionMySQL();

			    pstm = conn.prepareStatement(sql);

			    pstm.setInt(1, id);
			   

			    pstm.execute();

			}catch (Exception e) {
				e.printStackTrace();
			}finally {
				try {
					if (pstm != null)
				        pstm.close();
				    

				    if (conn != null) {
				        conn.close();
				    }
				}catch (Exception e) {
					e.printStackTrace();
			}
		 }

		}
		
		//readByid
		public Passagens readByid(int id) {
			Passagens Passagens = new Passagens();
			String sql = "select * FROM Passagens WHERE idPassagem = ?";
			
			Connection conn = null;
			PreparedStatement pstm = null;
			ResultSet rset = null;
			
			try {
			    conn = ConnectionMySQL.createConnectionMySQL();

			    pstm = conn.prepareStatement(sql);

			    pstm.setInt(1, id);
			    
			    rset = pstm.executeQuery();
			    
			    rset.next();
			    
			    Passagens.setId(rset.getInt("idPassagem"));
				Passagens.setNome(rset.getString("nome"));
				Passagens.setCPF(rset.getString("cpf"));
				Passagens.setEmail(rset.getString("email"));
				Passagens.setTelefone(rset.getString("telefone"));
			   

			}catch (Exception e) {
				e.printStackTrace();
			}finally {
				try {
					if (pstm != null)
				        pstm.close();
				    

				    if (conn != null) {
				        conn.close();
				    }
				}catch (Exception e) {
					e.printStackTrace();
			}
		 }
			
			return Passagens;
		}
	}
